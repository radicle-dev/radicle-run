(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{115:function(e,t,r){"use strict";r.r(t),r.d(t,"frontMatter",(function(){return a})),r.d(t,"metadata",(function(){return c})),r.d(t,"rightToc",(function(){return s})),r.d(t,"default",(function(){return l}));var n=r(1),i=r(6),o=(r(0),r(119)),a={id:"glossary",title:"Glossary",sidebar_label:"Glossary"},c={id:"glossary",title:"Glossary",description:"Entering the new paradigm of building peer-to-peer applications secured through cryptographic functions require a steep learning curve. There are a lot great gloassries, explaining these concepts and general terminoligy, such as the [a16z crypto glossary](https://a16z.com/2019/11/08/crypto-glossary/).",source:"@site/docs/glossary.md",permalink:"/glossary",editUrl:"https://github.com/radicle-dev/radicle-run/edit/master/website/docs/glossary.md",sidebar_label:"Glossary",sidebar:"someSidebar",previous:{title:"Submit transactions",permalink:"/submit-transactions"},next:{title:"FAQ",permalink:"/faq"}},s=[{value:"Radicle &amp; Registry",id:"radicle--registry",children:[]},{value:"Actions",id:"actions",children:[]}],p={rightToc:s};function l(e){var t=e.components,r=Object(i.a)(e,["components"]);return Object(o.b)("wrapper",Object(n.a)({},p,r,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"Entering the new paradigm of building peer-to-peer applications secured through cryptographic functions require a steep learning curve. There are a lot great gloassries, explaining these concepts and general terminoligy, such as the ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"https://a16z.com/2019/11/08/crypto-glossary/"}),"a16z crypto glossary"),"."),Object(o.b)("p",null,"In the following, radicle and registry specific terms will be explained."),Object(o.b)("h3",{id:"radicle--registry"},"Radicle & Registry"),Object(o.b)("h4",{id:"identity"},"Identity"),Object(o.b)("p",null,"Collection of public keys and profile data published by a user to the network. The minimal identity a user can have is a ",Object(o.b)("strong",{parentName:"p"},"Device ID"),". To further extend this identity, users can associate Device IDs to a global identity."),Object(o.b)("h4",{id:"device-id"},"Device ID"),Object(o.b)("p",null,"A user identity tied to a physical device. Similar to SSB IDs. Device IDs are created per-device and should never be copied to another device. Items created in Radicle are almost always signed by the Device ID."),Object(o.b)("h4",{id:"node"},"Node"),Object(o.b)("p",null,"Running instance of the radicle protocol. There is usually one node running per ",Object(o.b)("em",{parentName:"p"},"Device ID"),"."),Object(o.b)("h4",{id:"seed-node"},"Seed Node"),Object(o.b)("p",null,"An always-on node which replicates and serves data to connected peers."),Object(o.b)("h4",{id:"public-seed-node"},"Public Seed Node"),Object(o.b)("p",null,'A seed node which is meant to be used in a public context, eg. allowing any user with an invite code to have their data seeded. Similar to the "pub" in SSB.'),Object(o.b)("h4",{id:"peer"},"Peer"),Object(o.b)("p",null,"Connected node. Nodes are peers to each other. A user can only replicate data from one of their peers."),Object(o.b)("h4",{id:"repository"},"Repository"),Object(o.b)("p",null,"A VCS repository that may contain code, issues or other data."),Object(o.b)("h4",{id:"project"},"Project"),Object(o.b)("p",null,"A set of repositories under the same project identity",Object(o.b)("em",{parentName:"p"},".")," Repositories under a project share the same ",Object(o.b)("em",{parentName:"p"},"Project ID"),"."),Object(o.b)("h4",{id:"project-id"},"Project ID"),Object(o.b)("p",null,"A unique 32-byte random identifier representing a project. Project IDs are generated by radicle."),Object(o.b)("h4",{id:"project-name"},"Project Name"),Object(o.b)("p",null,"Human-readable project name of the form ",Object(o.b)("inlineCode",{parentName:"p"},"<name>.<domain>"),", eg. ",Object(o.b)("inlineCode",{parentName:"p"},"oculus.rad"),". "),Object(o.b)("h4",{id:"local-repository"},"Local Repository"),Object(o.b)("p",null,"Local representation of a Project. Changes made to your local repository are local and private until they are explicitly pushed to a remote."),Object(o.b)("h4",{id:"remote-repository"},"Remote Repository"),Object(o.b)("p",null,"A remote copy of a repository with the same ",Object(o.b)("em",{parentName:"p"},"Project ID"),", tracked by the VCS. Remotes can be pulled/fetched from."),Object(o.b)("h4",{id:"rad-remoteorigin"},"Rad Remote/Origin"),Object(o.b)("p",null,"The remote a user has to push to for their repository to be published on radicle. This is the only remote managed by radicle that can be pushed to."),Object(o.b)("h4",{id:"upstream"},"Upstream"),Object(o.b)("p",null,"The repository in which code contributions for a project are intended to be merged once they pass the review process. Also known as ",Object(o.b)("em",{parentName:"p"},"canonical upstream")," or ",Object(o.b)("em",{parentName:"p"},"mainline"),". The upstream is often the repository of the project's original maintainer or creator. For everyone but the owner of this repository, ",Object(o.b)("em",{parentName:"p"},"upstream")," will be a ",Object(o.b)("strong",{parentName:"p"},"remote"),"."),Object(o.b)("h4",{id:"maintainer"},"Maintainer"),Object(o.b)("p",null,"User with certain priviledges that is ",Object(o.b)("em",{parentName:"p"},"trusted")," by a project. There can be more than one maintainer per project. Maintainers are a subset of ",Object(o.b)("em",{parentName:"p"},"contributors"),"."),Object(o.b)("h4",{id:"contributor"},"Contributor"),Object(o.b)("p",null,"User which has contributed code or other data to a project. A user who clones a project and commits code to their local copy is not yet a contributor. Once that code is merged upstream, they become a contributor."),Object(o.b)("h3",{id:"actions"},"Actions"),Object(o.b)("h4",{id:"connecting"},"Connecting"),Object(o.b)("p",null,"Creating a network/physical connection to a peer. Connected peers gossip project and other data with each other."),Object(o.b)("h4",{id:"publishing"},"Publishing"),Object(o.b)("p",null,"Making data public to the network. Once something is published, it may be replicated and stored in multiple copies on the network. Data published by a user will be seeded by their node on the device from which it was published."),Object(o.b)("h4",{id:"cloning"},"Cloning"),Object(o.b)("p",null,"Running the ",Object(o.b)("inlineCode",{parentName:"p"},"git clone")," command against a radicle project, with the intent of contributing code to it."),Object(o.b)("h4",{id:"forking"},"Forking"),Object(o.b)("p",null,"Creating a new project with the intent of diverging from an existing one. This isn't recognized by radicle as anything other than a new project."),Object(o.b)("h4",{id:"replicating"},"Replicating"),Object(o.b)("p",null,'See "',Object(o.b)("em",{parentName:"p"},'seeding".')),Object(o.b)("h4",{id:"seeding"},"Seeding"),Object(o.b)("p",null,"Offering project data to peers. This is how projects become available on the network, and can be a way of supporting/contributing to a project."),Object(o.b)("h4",{id:"tracking"},"Tracking"),Object(o.b)("p",null,"Subscribing to the changes of a remote ",Object(o.b)("em",{parentName:"p"},"repository."),' Similar to "following" in SSB.'),Object(o.b)("h4",{id:"joining"},"Joining"),Object(o.b)("p",null,"Joining a public seed node, such that it seeds your projects and routes messages of interest to you."),Object(o.b)("h4",{id:"checkpointing"},"Checkpointing"),Object(o.b)("p",null,"Anchoring a project state hash on the registry. This sets the project state as canonical/trusted."))}l.isMDXComponent=!0},119:function(e,t,r){"use strict";r.d(t,"a",(function(){return b})),r.d(t,"b",(function(){return h}));var n=r(0),i=r.n(n);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function c(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var p=i.a.createContext({}),l=function(e){var t=i.a.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):c({},t,{},e)),r},b=function(e){var t=l(e.components);return i.a.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},u=Object(n.forwardRef)((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,a=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),b=l(r),u=n,h=b["".concat(a,".").concat(u)]||b[u]||d[u]||o;return r?i.a.createElement(h,c({ref:t},p,{components:r})):i.a.createElement(h,c({ref:t},p))}));function h(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,a=new Array(o);a[0]=u;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:n,a[1]=c;for(var p=2;p<o;p++)a[p]=r[p];return i.a.createElement.apply(null,a)}return i.a.createElement.apply(null,r)}u.displayName="MDXCreateElement"}}]);